schema {
  query: Query
  mutation: Mutation
}

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"""
A string that cannot be passed as an empty value
"""
scalar NonEmptyString

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input LoginInput {
  email: EmailAddress!
}

input RegisterInput {
  email: EmailAddress!
}

type AuthResult {
  user: User
  error: String
  token: String
}

type Category {
  id: ID!
  name: String
  posts(input: CursorConnectionArgs!): PostsConnection!
}

type Post {
  id: ID!
  createdAt: DateTime!
  published: Boolean!
  title: String!
  category: [Category!]
}

input PostCreate {
  title: NonEmptyString!
  category: [String!]
}

input PostUpdate {
  id: String!
  title: NonEmptyString
  category: [String!]
  published: Boolean
}

type PostsConnection {
  nodes: [Post!]!
  pageInfo: CursorPageInfo!
}

enum UserRole {
  USER
  ADMIN
}

type User {
  id: ID!
  name: String
  role: UserRole!
  email: String!
  "Posts created by user"
  posts(input: CursorConnectionArgs!): PostsConnection!
}

input CursorConnectionArgs {
  first: NonNegativeInt
  after: NonEmptyString
  last: NonNegativeInt
  before: NonEmptyString
}

type CursorPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: NonEmptyString
  endCursor: NonEmptyString
}

type Query {
  hello: String!
  namesList(n: Int = 10): [String!]!
  "Current authenticated user"
  currentUser: AuthResult!
  "Get all published posts"
  publicPosts(input: CursorConnectionArgs!): PostsConnection!
  "Get all current created categories"
  postsCategories: [Category!]!
}

type Mutation {
  hello: String!
  "Login user"
  login(input: LoginInput!): AuthResult!
  "Register user"
  register(input: RegisterInput!): AuthResult!
  "[Authenticated] Create new post"
  createPost(post: PostCreate!): Post!
  "[Authenticated] Update existing post"
  updatePost(post: PostUpdate!): Post!
  "[Authenticated] Remove own post"
  removeOwnPost(postId: String!): Boolean!
  setName(name: String!): User!
}
